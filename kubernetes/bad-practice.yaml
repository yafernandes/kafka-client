apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-middleman
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-middleman
  template:
    metadata:
      name: kafka-middleman
      labels:
        app: kafka-middleman
        tags.datadoghq.com/env: badpractice
        tags.datadoghq.com/service: middleman
        tags.datadoghq.com/version: "0.1"
      annotations:
        ad.datadoghq.com/kafka-middleman.logs: >-
          [
            {
              "source": "java",
              "service": "kafka-middleman"
            }
          ]
    spec:
      containers:
        - name: kafka-middleman 
          image: yaalexf/kafka-client
          imagePullPolicy: Always
          resources:
            requests:
              memory: "160Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_TRACE_ANALYTICS_ENABLED
              value: "true"
            - name: BOOTSTRAP
              value: "kafka.azure.pipsquack.ca:9092"
            - name: TOPIC_IN
              value: "bp1"
            - name: TOPIC_OUT
              value: "bp2"
            - name: JAVA_OPTS
              value: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-consumer
  template:
    metadata:
      name: kafka-consumer
      labels:
        app: kafka-consumer
        tags.datadoghq.com/env: badpractice
        tags.datadoghq.com/service: consumer
        tags.datadoghq.com/version: "0.1"
      annotations:
        ad.datadoghq.com/kafka-consumer.logs: >-
          [
            {
              "source": "java",
              "service": "kafka-consumer"
            }
          ]
    spec:
      containers:
        - name: kafka-consumer 
          image: yaalexf/kafka-client
          imagePullPolicy: Always
          resources:
            requests:
              memory: "160Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_TRACE_ANALYTICS_ENABLED
              value: "true"
            - name: BOOTSTRAP
              value: "kafka.azure.pipsquack.ca:9092"
            - name: TOPIC_IN
              value: "bp2"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-servlet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-servlet
  template:
    metadata:
      name: kafka-servlet
      labels:
        app: kafka-servlet
        tags.datadoghq.com/env: badpractice
        tags.datadoghq.com/service: servlet
        tags.datadoghq.com/version: "0.1"
      annotations:
        ad.datadoghq.com/kafka-servlet.logs: >-
          [
            {
              "source": "java",
              "service": "kafka-servlet"
            }
          ]
    spec:
      containers:
        - name: kafka-servlet 
          image: yaalexf/kafka-client
          imagePullPolicy: Always
          resources:
            requests:
              memory: "160Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_TRACE_ANALYTICS_ENABLED
              value: "true"
            - name: BOOTSTRAP
              value: "kafka.azure.pipsquack.ca:9092"
---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: kafka-servlet
  name: kafka-servlet
spec:
  selector:
    app: kafka-servlet
  ports:
    - port: 8000
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: kafka-servlet
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  # host: master.k8s.aws.pipsquack.ca
  - http:
      paths:
      - path: /badpractice(/|$)(.*)
        backend:
          serviceName: kafka-servlet
          servicePort: 8000
